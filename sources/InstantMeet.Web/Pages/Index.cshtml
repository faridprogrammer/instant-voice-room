@page
@using Microsoft.AspNetCore.Authorization
@model InstantMeet.Pages.IndexModel
@attribute [Authorize]
@{
  ViewData["Title"] = "Join a meeting";
}

<style>
  body {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-color: #f0f2f5;
  }

  .container {
    background-color: #ffffff;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    max-width: 500px;
    width: 100%;
  }

  .form-label {
    font-weight: bold;
  }
</style>

<div class="container">
  <h2 class="text-center mb-4">Instant meet</h2>

  <div class="mb-3">
    <label for="roomNameInput" class="form-label">Meeting Room Name:</label>
    <input type="text" class="form-control" id="roomNameInput" placeholder="Enter unique room name">
  </div>

  <div class="d-grid gap-2 mb-4">
    <button class="btn btn-primary" id="createRoomBtn">Create Meeting Room</button>
  </div>

  <hr>

  <h3 class="text-center mb-3">Join Existing Meeting</h3>

  <div class="mb-3">
    <label for="joinRoomNameInput" class="form-label">Room Name:</label>
    <input type="text" class="form-control" id="joinRoomNameInput" placeholder="Enter room name to join">
  </div>

  <div class="mb-3">
    <label for="userNameInput" class="form-label">Your Name:</label>
    <input type="text" class="form-control" id="userNameInput" placeholder="Enter your name">
  </div>

  <div class="d-grid gap-2">
    <button class="btn btn-success" id="joinRoomBtn">Join Meeting</button>
  </div>

  <div id="statusMessage" class="mt-3 text-center" style="display: none;"></div>
</div>

<script>
  const roomNameInput = document.getElementById('roomNameInput');
  const createRoomBtn = document.getElementById('createRoomBtn');
  const joinRoomNameInput = document.getElementById('joinRoomNameInput');
  const userNameInput = document.getElementById('userNameInput');
  const joinRoomBtn = document.getElementById('joinRoomBtn');
  const statusMessageDiv = document.getElementById('statusMessage');

  const signalRHubUrl = '/instantMeetHub';
  const connection = new signalR.HubConnectionBuilder()
    .withUrl(signalRHubUrl)
    .build();

  connection.on("RoomCreationStatus", (success, message) => {
    showStatus(message, success ? 'alert-success' : 'alert-danger');
    if (success) {
      // Optionally redirect or clear input
      roomNameInput.value = '';
    }
  });

  connection.on("JoinRoomStatus", (success, connectionId, existingParticipants) => {
    if (success) {
      showStatus("Successfully joined!", 'alert-success');
      const roomName = joinRoomNameInput.value.trim();
      const userName = userNameInput.value.trim();
      // Redirect to the meeting room page with parameters
      window.location.href = `meeting?room=${encodeURIComponent(roomName)}&name=${encodeURIComponent(userName)}`;
    } else {
      showStatus(connectionId, 'alert-danger'); // connectionId holds the error message here
    }
  });

  async function startSignalRConnection() {
    try {
      await connection.start();
      console.log("SignalR Connected.");
    } catch (err) {
      console.error("SignalR Connection Error: ", err);
      setTimeout(startSignalRConnection, 5000); // Retry connection
    }
  }

  connection.onclose(async () => {
    console.log("SignalR Disconnected. Reconnecting...");
    await startSignalRConnection();
  });

  createRoomBtn.addEventListener('click', async () => {
    const roomName = roomNameInput.value.trim();
    if (roomName) {
      await connection.invoke("CreateRoom", roomName);
    } else {
      showStatus("Please enter a room name.", 'alert-warning');
    }
  });

  joinRoomBtn.addEventListener('click', async () => {
    const roomName = joinRoomNameInput.value.trim();
    const userName = userNameInput.value.trim();
    if (roomName && userName) {
      await connection.invoke("JoinRoom", roomName, userName);
    } else {
      showStatus("Please enter both room name and your name.", 'alert-warning');
    }
  });

  function showStatus(message, type) {
    statusMessageDiv.textContent = message;
    statusMessageDiv.className = `mt-3 text-center alert ${type}`;
    statusMessageDiv.style.display = 'block';
    setTimeout(() => {
      statusMessageDiv.style.display = 'none';
    }, 5000); // Hide after 5 seconds
  }

  startSignalRConnection();
</script>